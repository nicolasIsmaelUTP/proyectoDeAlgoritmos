/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.utp.proyectodealgoritmos;

import java.util.Stack;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Usuario
 */
public class NotasPila extends javax.swing.JInternalFrame {

    Stack<String> pila = new Stack<>();
    DefaultListModel modelo = new DefaultListModel();
    int tamano = 100;

    /**
     * Creates new form NotasPila
     */
    public NotasPila() {
        initComponents();
        this.setSize(399, 360);
        this.setTitle("Notas Pila");
        actualizarLista();
        tf_cantidad.setEditable(false);
        tf_caben.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tf_tamano = new javax.swing.JTextField();
        btn_tamano = new javax.swing.JButton();
        btn_destruir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        tf_cantidad = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tf_nota = new javax.swing.JTextField();
        tf_caben = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        lst_pila = new javax.swing.JList<>();
        btn_apilar = new javax.swing.JButton();
        btn_desapilar = new javax.swing.JButton();
        btn_ordenar = new javax.swing.JButton();
        btn_promedio = new javax.swing.JButton();
        txt_max = new javax.swing.JTextField();
        txt_min = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(tf_tamano, new org.netbeans.lib.awtextra.AbsoluteConstraints(169, 175, 93, -1));

        btn_tamano.setText("Setear tamaño");
        btn_tamano.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_tamanoActionPerformed(evt);
            }
        });
        getContentPane().add(btn_tamano, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 200, -1, -1));

        btn_destruir.setText("Destruir");
        btn_destruir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_destruirActionPerformed(evt);
            }
        });
        getContentPane().add(btn_destruir, new org.netbeans.lib.awtextra.AbsoluteConstraints(169, 98, 83, -1));

        jLabel1.setText("nº de notas:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 270, -1, -1));

        tf_cantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_cantidadActionPerformed(evt);
            }
        });
        getContentPane().add(tf_cantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(159, 268, 77, -1));

        jLabel2.setText("Aún caben:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(86, 302, -1, -1));
        getContentPane().add(tf_nota, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 114, -1));

        tf_caben.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_cabenActionPerformed(evt);
            }
        });
        getContentPane().add(tf_caben, new org.netbeans.lib.awtextra.AbsoluteConstraints(159, 298, 77, -1));

        jScrollPane1.setViewportView(lst_pila);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 62, 114, 179));

        btn_apilar.setText("Apilar");
        btn_apilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_apilarActionPerformed(evt);
            }
        });
        getContentPane().add(btn_apilar, new org.netbeans.lib.awtextra.AbsoluteConstraints(169, 20, 83, -1));

        btn_desapilar.setText("Desapilar");
        btn_desapilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_desapilarActionPerformed(evt);
            }
        });
        getContentPane().add(btn_desapilar, new org.netbeans.lib.awtextra.AbsoluteConstraints(169, 62, 83, -1));

        btn_ordenar.setText("Ordenar");
        btn_ordenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ordenarActionPerformed(evt);
            }
        });
        getContentPane().add(btn_ordenar, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 20, -1, -1));

        btn_promedio.setText("Promedio");
        btn_promedio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_promedioActionPerformed(evt);
            }
        });
        getContentPane().add(btn_promedio, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 60, -1, -1));
        getContentPane().add(txt_max, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 270, 60, -1));
        getContentPane().add(txt_min, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 300, 60, -1));

        jLabel3.setText("Max :");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 270, -1, -1));

        jLabel4.setText("Min :");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 300, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_promedioActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btn_promedioActionPerformed
        if (pila.isEmpty()) {
            JOptionPane.showMessageDialog(null, "La pila esta vacia");
        } else {
            // Recorremos la pila y sumamos todas las notas
            int suma = 0;
            for (int i = 0; i < pila.size(); i++) {
                suma += Integer.parseInt(pila.get(i));
            }

            // Calculamos el promedio
            double promedio = (double) suma / pila.size();

            // Mostramos el promedio con JOptionPane
            JOptionPane.showMessageDialog(null, "Promedio: " + promedio);
        }
    }// GEN-LAST:event_btn_promedioActionPerformed

    private void btn_minimoActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btn_minimoActionPerformed
        if (pila.isEmpty()) {
            JOptionPane.showMessageDialog(null, "La pila esta vacia");
        } else {
            // Recorremos la pila y buscamos la nota mínima
            int minimo = Integer.parseInt(pila.get(0));
            for (int i = 1; i < pila.size(); i++) {
                if (Integer.parseInt(pila.get(i)) < minimo) {
                    minimo = Integer.parseInt(pila.get(i));
                }
            }

            // Mostramos el mínimo con JOptionPane
            JOptionPane.showMessageDialog(null, "Mínimo: " + minimo);
        }
    }// GEN-LAST:event_btn_minimoActionPerformed

    private void btn_maximoActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btn_maximoActionPerformed
        if (pila.isEmpty()) {
            JOptionPane.showMessageDialog(null, "La pila esta vacia");
        } else {
            // Recorremos la pila y buscamos la nota máxima
            int maximo = Integer.parseInt(pila.get(0));
            for (int i = 1; i < pila.size(); i++) {
                if (Integer.parseInt(pila.get(i)) > maximo) {
                    maximo = Integer.parseInt(pila.get(i));
                }
            }

            // Mostramos el máximo con JOptionPane
            JOptionPane.showMessageDialog(null, "Máximo: " + maximo);
        }
    }// GEN-LAST:event_btn_maximoActionPerformed

    private void btn_tamanoActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btn_tamanoActionPerformed
        // Setear tamaño
        String aux = tf_tamano.getText();
        int cantidad_elementos = pila.size();
        if (aux.matches("[+-]?\\d*(\\.\\d+)?") && !aux.equals("")) {
            int numero_ingresado = Integer.parseInt(aux);
            if (cantidad_elementos < numero_ingresado) {
                tamano = numero_ingresado;
            } else {
                for (int i = 0; i < cantidad_elementos - numero_ingresado; i++) {
                    pila.pop();
                }
                tamano = numero_ingresado;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Ingrese un número");
            tf_tamano.setText("");
            tf_tamano.requestFocus();
        }
        actualizarLista();
        tf_nota.requestFocus();
    }// GEN-LAST:event_btn_tamanoActionPerformed

    private void btn_destruirActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btn_destruirActionPerformed
        // Destruir
        pila.clear();
        actualizarLista();
        tf_nota.requestFocus();
    }// GEN-LAST:event_btn_destruirActionPerformed

    private void tf_cantidadActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_tf_cantidadActionPerformed

    }// GEN-LAST:event_tf_cantidadActionPerformed

    private void tf_cabenActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_tf_cabenActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_tf_cabenActionPerformed

    private void btn_apilarActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btn_apilarActionPerformed
        // Apilar
        int valormax = -9999;
        int valormin = 9999;
              if (pila.size() < tamano) {
            String texto_ingresado = tf_nota.getText();

            if (!texto_ingresado.equals("") && esNotaValida(texto_ingresado)) {
                pila.push(texto_ingresado);
                actualizarLista();
            } else {
                JOptionPane.showMessageDialog(null, "Ingrese un número del 1 al 20");
            }
        } else {
            JOptionPane.showMessageDialog(null, "La pila está llena");
        }
        tf_nota.setText("");
        tf_nota.requestFocus();
          for (String i : pila) {
            if (Integer.parseInt(i) > valormax) {
                valormax = Integer.parseInt(i);
            }
            if (Integer.parseInt(i) < valormin) {
                // Recorriendo la cola

                valormin = Integer.parseInt(i);
            }

            String valmx = String.valueOf(valormax);
            txt_max.setText(valmx);
            String valmn = String.valueOf(valormin);
            txt_min.setText(valmn);
        }

    }// GEN-LAST:event_btn_apilarActionPerformed

    private boolean esNotaValida(String nota) {
        // Verificar que todos los caracteres sean dígitos
        for (int i = 0; i < nota.length(); i++) {
            if (!Character.isDigit(nota.charAt(i))) {
                return false;
            }
        }

        // Convertir la cadena a un número entero
        int valorNota = Integer.parseInt(nota);

        // Verificar el rango de la nota
        if (valorNota < 1 || valorNota > 20) {
            return false;
        }

        // La nota es válida
        return true;
    }

    private void btn_desapilarActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btn_desapilarActionPerformed
        // Desapilar
        if (pila.isEmpty()) {
            JOptionPane.showMessageDialog(null, "La pila está vacía");
        } else {
            pila.pop();
            actualizarLista();
        }
        tf_nota.requestFocus();
        
        txt_max.setText("");
        txt_min.setText("");
    }// GEN-LAST:event_btn_desapilarActionPerformed

    private void btn_ordenarActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btn_ordenarActionPerformed
        // Ordenar
        if (pila.isEmpty()) {
            JOptionPane.showMessageDialog(null, "La pila esta vacia");
        } else {
            // Convirtiendo la pila en un arreglo
            int[] array = new int[pila.size()];
            for (int i = 0; i < array.length; i++) {
                array[i] = Integer.parseInt(pila.get(i));
            }

            // Ordenando el arreglo
            array = ordenarPorInsercion(array);

            // Mostando el arreglo ordenado con JOptionPane
            String mensaje = "Notas ordenadas: ";
            for (int i = 0; i < array.length; i++) {
                mensaje += "\n" + array[i];
            }
            JOptionPane.showMessageDialog(null, mensaje);
        }
    }// GEN-LAST:event_btn_ordenarActionPerformed

    private int[] ordenarPorInsercion(int[] notas) {
        int aux;
        // Creamos una copia del arreglo de notas para no modificar el original.
        int[] notasOrdenadas = notas.clone();

        // Seleccionamos un elemento i del arreglo.
        for (int i = 0; i < notasOrdenadas.length; i++) {
            // Recorremos el arreglo desde i hasta el principio.
            for (int j = i; j > 0; j--) {
                // Si encontramos una nota menor se intercambian las posiciones.
                if (notasOrdenadas[j] < notasOrdenadas[j - 1]) {
                    aux = notasOrdenadas[j];
                    notasOrdenadas[j] = notasOrdenadas[j - 1];
                    notasOrdenadas[j - 1] = aux;
                } else {
                    // Si no se cumple la condición, el arreglo está ordenado hasta el índice i.
                    break;
                }
            }
        }

        // Devolvemos el arreglo ordenado.
        return notasOrdenadas;
    }

    private void actualizarLista() {
        lst_pila.setModel(modelo);
        modelo.removeAllElements();
        for (int i = pila.size() - 1; i >= 0; i--) {
            modelo.addElement(pila.get(i));
        }

        int cantidad_elementos = pila.size();
        tf_cantidad.setText(String.valueOf(cantidad_elementos));
        tf_caben.setText(String.valueOf(tamano - cantidad_elementos));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_apilar;
    private javax.swing.JButton btn_desapilar;
    private javax.swing.JButton btn_destruir;
    private javax.swing.JButton btn_ordenar;
    private javax.swing.JButton btn_promedio;
    private javax.swing.JButton btn_tamano;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> lst_pila;
    private javax.swing.JTextField tf_caben;
    private javax.swing.JTextField tf_cantidad;
    private javax.swing.JTextField tf_nota;
    private javax.swing.JTextField tf_tamano;
    private javax.swing.JTextField txt_max;
    private javax.swing.JTextField txt_min;
    // End of variables declaration//GEN-END:variables
}
